---
/**
 * !Este elemento va dentro de cada una de las rutas dinámicas y no de los index de las páginas generales
 */

import { SITE_DEFAULT_CONFIG } from "@/global/siteInfo";
import { convertDateToISO8601 } from "@utils/validatingDate";
import { type CollectionEntry } from "astro:content";

const { entry } = Astro.props;

const bias = entry as CollectionEntry<"bias">;
const { data } = bias;
const { cover, name, description, keywords, publishDate, lastTimeEdited } =
  data;

const postName =
  `${name} - ${SITE_DEFAULT_CONFIG.title}` || SITE_DEFAULT_CONFIG.title;

const postDescription =
  `${description} - ${SITE_DEFAULT_CONFIG.title}` ||
  `Sesgos y heurísticas - ${SITE_DEFAULT_CONFIG.title}`;

const ogImage = new URL("./og-image.png", Astro.site);
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const justInCaseNoCoverSrc =
  `${SITE_DEFAULT_CONFIG.url}${cover.src.src}` || ogImage;
const justInCaseNoCoverAlt = cover.alt || postName;

// Validación de fechas. lastTimeEdited puede ser undefined en la collection pero en la práctica no pero para evitar el error hago la validación
const publisDateInISO = convertDateToISO8601(publishDate);
const lastTimeEditedInISO = convertDateToISO8601(
  !lastTimeEdited ? publishDate : lastTimeEdited,
);
---

{/* OBLIGATORIOS DEL SITIO */}
<title>{postName}</title>
<meta name="title" content={postName} />
<meta name="description" content={postDescription} />
<meta name="author" content={SITE_DEFAULT_CONFIG.author} />

<link rel="canonical" href={canonicalURL} />

{/* OPEN GRAPH - Facebook , LinkedIn */}
<meta property="og:type" content="article" />
<meta property="og:site_name" content={SITE_DEFAULT_CONFIG.title} />
<meta property="og:title" content={postName} />
<meta property="og:description" content={postDescription} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:locale" content={SITE_DEFAULT_CONFIG.location} />

<meta property="og:site_name" content={SITE_DEFAULT_CONFIG.title} />

<meta property="og:image" content={justInCaseNoCoverSrc} />
<meta property="og:image:alt" content={justInCaseNoCoverAlt} />

<meta property="article:published_time" content={publisDateInISO} />
<meta property="article:modified_time" content={lastTimeEditedInISO} />

{
  keywords &&
    keywords.map((keyword: string) => {
      return <meta property="article:tag" content={keyword} />;
    })
}

{/* TWITTER - X */}
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={postName} />
<meta name="twitter:description" content={postDescription} />
<meta name="twitter:image" content={justInCaseNoCoverSrc} />
<meta name="twitter:image:alt" content={justInCaseNoCoverAlt} />

{/* RSS auto-discovery */}
{
  /*<link
  href="/rss.xml"
  rel="alternate"
  title={SITE_DEFAULT_CONFIG.title}
  type="application/rss+xml"
/>*/
}
