---
// TODO: CREAR LAS CONFIGS Y DESCOMENTAR CUANDO EMPIECE A SUBIR EL CONTENIDO YA QUE EST√Å TODO HECHO, FALTA IMPLEMENTARLO

import { SITE_DEFAULT_CONFIG } from "@/global/siteInfo";
import { type CollectionEntry } from "astro:content";

interface Props {
  entry: CollectionEntry<"bias">;
}

const { entry } = Astro.props;
const bias = entry as CollectionEntry<"bias">;
const { data, slug } = bias;
const { biasImage, biasName, description, keywords, publishDate } = data;

const biasTitle = bias.data.biasName || SITE_DEFAULT_CONFIG.title;
const biasDescription = description || SITE_DEFAULT_CONFIG.description;
const ogImage = new URL("./public/og-image.png", Astro.site);

const siteBiasURL = `${SITE_DEFAULT_CONFIG.url}/essay/bias/${slug}`;
// a futuro cambiarlo üëáüèΩ por cloudinary o si hago rutas de archivos dentro de los blogs
const justInCaseBiasImageSrc = biasImage.src || ogImage;
const justInCaseBiasImageAlt = biasImage.alt || biasName;
---

<!-- BIAS PARA SEO -->
<title>{`${biasTitle} - mrjark`}</title>
<meta name="description" content={biasDescription} />
<link rel="canonical" href={siteBiasURL} />

<!-- <meta name="title" content={`${biasTitle} - mrjark`} /> -->

<!-- OPEN GRAPH METATAGS -->
<meta property="og:title" content={biasTitle} />
<meta property="og:description" content={biasDescription} />
<meta property="og:url" content={siteBiasURL} />
<meta property="og:type" content="article" />
<!-- LAS IM√ÅGENES LAS SACAR√â DEPENDIENDO DEL PATH RELATIVO DEL BIAS TODO: (O CLOUDINARY A FUTURO) -->
<meta property="og:image" content={justInCaseBiasImageSrc} />
<meta property="og:image:alt" content={justInCaseBiasImageAlt} />
<meta property="og:locale" content={SITE_DEFAULT_CONFIG.location} />
<meta property="og:site_name" content="mrjark" />

<!-- META ESPEC√çFICO DEL POST -->
<meta property="article:published_time" content={publishDate} /> //TODO:

<!-- OG TWITTER/X - LINKEDIN - FACERBOOK -->
<meta name="twitter:title" content={biasTitle} />
<meta name="twitter:description" content={biasDescription} />
<meta property="twitter:image" content={justInCaseBiasImageSrc} />
<meta name="twitter:image:alt" content={justInCaseBiasImageAlt} />
<meta name="twitter:card" content="summary_large_image" />

{
  keywords &&
    keywords.map((keyword: string) => {
      return <meta property="article:tag" content={keyword} />;
    })
}
